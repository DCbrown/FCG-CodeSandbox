import React from "react";
// USE LOCAL STORAGE!!!
// TRY LOCAL ENV + CHECK CONSOLE.LOGS OBJECTS SEE IF THEY MATCH
// REF: https://www.bigbinary.com/videos/learn-reactjs-in-steps/edit-todo-part-2

class Generate extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      clinetIsEdit: false,
      clientIsPresented: false,
      generateId: null,
      generateFirstName: "",
      generateLastName: "",
      generateRequest: "",
      generateParagraphOne: "",
      generateParagraphTwo: "",
      generateParagraphThree: "",
      clients: [],
      acceptedClients: [],
      inProgressClients: [],
      completedClients: []
    };
    this.handleClick = this.handleClick.bind(this);
    this.handleDecline = this.handleDecline.bind(this);
    this.handleAccept = this.handleAccept.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.handleEditClosed = this.handleEditClosed.bind(this);
    this.handleDelete = this.handleDelete.bind(this);
  }

  componentDidMount() {
    this.getData();
  }

  getData = () => {
    const clients = [
      {
        id: 1,
        firstName: "Jon",
        lastName: "Doe",
        request: "Need a Website",
        paragraphOne: "Need a Website Now",
        paragraphTwo: "Will Pay",
        paragraphThree: "Need soon",
        notes: ""
      },
      {
        id: 2,
        firstName: "Jane",
        lastName: "Dow",
        request: "Need portfolio Website",
        paragraphOne: "Need a Website Later",
        paragraphTwo: "Will Pay",
        paragraphThree: "Need soon",
        notes: ""
      },
      {
        id: 3,
        firstName: "Jake",
        lastName: "Ed",
        request: "Need picture Website",
        paragraphOne: "Need a Website Tomorrow",
        paragraphTwo: "Will Pay",
        paragraphThree: "Need soon",
        notes: ""
      }
    ];
    this.setState({
      clients: clients
    });
  };

  handleClick = e => {
    e.preventDefault();
    const { clients } = this.state;
    const gen = Math.floor(Math.random() * clients.length);
    const genId = clients[gen].id;
    const genFirstName = clients[gen].firstName;
    const genLastName = clients[gen].lastName;
    const genRequest = clients[gen].request;
    const genParagraphOne = clients[gen].paragraphOne;
    const genParagraphTwo = clients[gen].paragraphTwo;
    const genParagraphThree = clients[gen].paragraphThree;
    console.log(genRequest);
    this.setState({
      generateId: genId,
      generateFirstName: genFirstName,
      generateLastName: genLastName,
      generateRequest: genRequest,
      generateParagraphOne: genParagraphOne,
      generateParagraphTwo: genParagraphTwo,
      generateParagraphThree: genParagraphThree,
      clientIsPresented: true
    });
    console.log(this.state.generateRequest);
    console.log("HEY!" + this.state.acceptedClients.generateRequest);
  };

  handleDecline = e => {
    this.setState({
      generateId: "",
      generateFirstName: "",
      generateLastName: "",
      generateRequest: "",
      genParagraphOne: "",
      genParagraphThree: '',
      genParagraphThree: "",
      clientIsPresented: false
    });
  };

  handleAccept = e => {
    e.preventDefault();
    this.handleDecline();

    const obj = {
      id: this.state.generateId,
      firstName: this.state.generateFirstName,
      lastName: this.state.generateLastName,
      request: this.state.generateRequest,
      paragraphOne: this.state.generateParagraphOne,
      paragraphTwo: this.state.generateParagraphTwo,
      paragraphThree: this.state.generateParagraphThree,
    };
    this.state.acceptedClients.push(obj);

    console.log("object " + obj.firstName);
    console.log("oject " + obj.lastName);
    console.log("object " + obj.request);
    console.log(this.state.acceptedClients);
  };

  handleDelete = key => {
    console.log(key);
    const clients = [...this.state.acceptedClients];
    clients.splice(key, 1);
    this.setState({ acceptedClients: clients });
  };

  handleDelete = key => {
    var r = window.confirm("Are you sure you want to delete this user");
    if (r === true) {
      console.log(key);
      const clients = [...this.state.acceptedClients];
      clients.splice(key, 1);
      this.setState({ acceptedClients: clients });
    } else {
    }
  };

  handleEdit = e => {
    e.preventDefault();
    this.setState({
      clinetIsEdit: true
    });
  };

  handleEditClosed = e => {
    e.preventDefault();
    this.setState({
      clinetIsEdit: false
    });
  };

  render() {
    let showClient;
    let showClientEdit;

    if (this.state.clientIsPresented) {
      showClient = (
        <div className="card text-center">
          <h5 className="card-header">Client Request</h5>
          <div className="card-body">
            <h5 className="card-title">
              {this.state.generateFirstName} {this.state.generateLastName}
            </h5>
            <p className="card-text">
              With supporting text below as a natural lead-in to additional
              content.
            </p>
            <p className="card-text">{this.state.generateRequest}</p>
            <button className="btn btn-success" onClick={this.handleAccept}>
              Accept
            </button>
            <button className="btn btn-danger" onClick={this.handleDecline}>
              Decline
            </button>
            <br />
            <time datetime="2016-1-1">11:09 PM - 1 Jan 2019</time>
          </div>
        </div>
      );
    }

    if (this.state.clinetIsEdit) {
      showClientEdit = (
        <form>
          <div className="form-group">
            <label for="exampleFormControlSelect1">Percentage complete</label>
            <select classNAme="form-control" id="exampleFormControlSelect1">
              <option>0 %</option>
              <option>10 %</option>
              <option>20 %</option>
              <option>30 %</option>
              <option>40 %</option>
              <option>50 %</option>
              <option>60 %</option>
              <option>70 %</option>
              <option>80 %</option>
              <option>90 %</option>
              <option>Complete</option>
            </select>
          </div>
          <div className="form-group">
            <label for="exampleFormControlTextarea1">Notes</label>
            <textarea
              class="form-control"
              id="exampleFormControlTextarea1"
              rows="3"
              placeholder="Created layout, add images, develop JvavScript file, etc"
            />
          </div>
          <button type="submit" className="btn btn-success">
            Save <i class="far fa-save" />
          </button>
          <button
            type="submit"
            onClick={this.handleEditClosed.bind(this)}
            className="btn btn-danger"
          >
            Close <i className="fas fa-times" />
          </button>
        </form>
      );
    }

    return (
      <div>
        <div className="jumbotron jumbotron-fluid text-center">
          <div className="container">
            <h1 className="display-4">Fluid jumbotron</h1>
            <button
              type="button"
              className="btn btn-info"
              onClick={this.handleClick}
            >
              Generate A Client <i class="fa fa-users" aria-hidden="true" />
            </button>
            <p className="lead">
              This is a modified jumbotron that occupies the entire horizontal
              space of its parent.
            </p>
          </div>
        </div>
        <div className="container">
          <div className="row">
            <div className="col-md-6 offset-md-3">{showClient}</div>
          </div>
        </div>
        <div className="column is-full">
          <h1 className="has-text-centered">List</h1>
          <div className="has-text-centered">
            <span className="button is-success">Accepted</span>
            <span className="button is-info">In Progress</span>
            <span className="button is-danger">Finished</span>
          </div>
          <div className="col-8 offset-md-2">
            <ul className="list-group">
              {this.state.acceptedClients.map((item, key) => (
                <li
                  className="list-group-item d-flex justify-content-between align-items-center"
                  key={item.id}
                >
                  <div id="accordion">
                    <div class="card">
                      <div class="card-header" id="headingOne">
                        <h5 class="mb-0">
                          <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            {item.paragraphOne} {item.firstName} {item.lastName} | {item.request} | Progress: 0%
                          </button>
                        </h5>
                      </div>
                      <div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordion">
                        <div class="card-body">
                          <p>{item.paragraphOne}</p>
                          <p>{item.paragraphTwo}</p>
                          <p>{item.paragraphThree}</p>
                          <button
                            className="btn btn-outline-danger"
                            onClick={this.handleDelete.bind(this, key)}
                          >
                            Delete
                      </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
            {showClientEdit}
          </div>
        </div>
      </div>
    );
  }
}

export default Generate;
